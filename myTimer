#!/usr/bin/env node

// myTimer (v12)
// Adds an Apple Music catalog search feature.

const yargs = require('yargs/yargs');
const { hideBin } = require('yargs/helpers');
const util = require('util');
const { exec } = require('child_process');
const execPromise = util.promisify(exec);

// --- Command-Line Argument Parsing ---
const argv = yargs(hideBin(process.argv))
  .option('i', {
    alias: 'interval',
    describe: 'Number of work/break intervals',
    type: 'number',
    default: 4,
    choices: [1, 2, 3, 4]
  })
  .option('w', {
    alias: 'work',
    describe: 'Duration of work intervals in minutes',
    type: 'number',
    default: 25
  })
  .option('b', {
    alias: 'break',
    describe: 'Duration of break intervals in minutes',
    type: 'number',
    default: 5
  })
  .option('last-break', {
    describe: 'Include the final break period after the last work interval',
    type: 'boolean',
    default: false
  })
  .option('search', {
    describe: 'If a local playlist is not found, search the Apple Music catalog',
    type: 'boolean',
    default: false
  })
  .help()
  .alias('help', 'h')
  .argv;

// --- Use Parsed Arguments as Configuration ---
const WORK_MINUTES = argv.work;
const BREAK_MINUTES = argv.break;
const TOTAL_CYCLES = argv.interval;
// ---------------------------------------------

const WORK_INTERVAL_MS = WORK_MINUTES * 60 * 1000;
const BREAK_INTERVAL_MS = BREAK_MINUTES * 60 * 1000;
const CYCLE_DURATION_MS = WORK_INTERVAL_MS + BREAK_INTERVAL_MS;

let originalVolume = 50;
let operatingMode = 'system';

// --- System & App Control Functions ---

function executeAppleScript(script) {
  const command = `osascript -e '${script}'`;
  exec(command, (error) => {
    if (error) console.error(`AppleScript Error: ${error.message}`);
  });
}

async function playlistExists(name) {
    const sanitizedName = name.replace(/'/g, "'\\''");
    const script = `tell application "Music" to exists (playlist named "${sanitizedName}")`;
    try {
        const { stdout } = await execPromise(`osascript -e '${script}'`);
        return stdout.trim() === 'true';
    } catch (error) {
        console.error(`Error checking for playlist: ${error.message}`);
        return false;
    }
}

function searchAndPlayMusic(searchTerm) {
    logStatus(`Searching Apple Music catalog for "${searchTerm}"...`);
    const encodedTerm = encodeURIComponent(searchTerm);
    const searchUrl = `music://music.apple.com/search?term=${encodedTerm}`;
    exec(`open "${searchUrl}"`, (error) => {
        if (error) console.error(`Error opening search URL: ${error.message}`);
    });
}

// ... (All other control functions like playPlaylist, pauseMusic, etc., are unchanged) ...
async function playCompletionSound() {
    logStatus('Playing completion sound...');
    const soundPath = '/System/Library/Sounds/Hero.aiff';
    const sleep = ms => new Promise(res => setTimeout(res, ms));
    for (let i = 0; i < 5; i++) {
        exec(`afplay ${soundPath}`);
        await sleep(350);
    }
}
function playPlaylist(name) {
  const sanitizedName = name.replace(/'/g, "'\\''");
  logStatus(`Starting Apple Music playlist: "${sanitizedName}"`);
  executeAppleScript(`tell application "Music" to play playlist "${sanitizedName}"`);
}
function pauseMusic() {
  logStatus(`Pausing Apple Music. ü§´`);
  executeAppleScript(`tell application "Music" to pause`);
}
function resumeMusic() {
  logStatus(`Resuming Apple Music. üîä`);
  executeAppleScript(`tell application "Music" to play`);
}
function stopMusic() {
  logStatus(`Stopping Apple Music playback.`);
  executeAppleScript(`tell application "Music" to stop`);
}
function muteSystem() {
  logStatus(`Muting system audio. ü§´`);
  setVolume(0);
}
function restoreSystemVolume() {
  logStatus(`Restoring system volume to ${originalVolume}. üîä`);
  setVolume(originalVolume);
}
function playYouTubeVideo(url) {
  logStatus(`Opening YouTube video in your browser...`);
  exec(`open "${url}"`, (error) => {
    if (error) console.error(`Error opening URL: ${error.message}`);
  });
}
async function getVolume() {
  try {
    const { stdout } = await execPromise(`osascript -e 'output volume of (get volume settings)'`);
    return parseInt(stdout.trim(), 10);
  } catch (err) { return 50; }
}
function setVolume(level) {
  executeAppleScript(`set volume output volume ${level}`);
}

// --- Timer & Logging Functions ---

function logStatus(message) {
    const timestamp = new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });
    console.log(`[${timestamp}] ${message}`);
}
async function runFinalActions() {
    logStatus('All cycles complete. Finishing program. Great work!');
    if (operatingMode === 'music') {
        stopMusic();
    } else {
        restoreSystemVolume();
    }
    await playCompletionSound();
}
function runCycle(currentCycle) {
  if (operatingMode === 'music') {
    resumeMusic();
  } else {
    restoreSystemVolume();
  }
  logStatus(`Starting ${WORK_MINUTES}-minute work interval ${currentCycle} of ${TOTAL_CYCLES}.`);
  setTimeout(() => {
    const isLastCycle = currentCycle === TOTAL_CYCLES;
    if (isLastCycle && !argv.lastBreak) {
        runFinalActions();
        return;
    }
    logStatus(`Starting ${BREAK_MINUTES}-minute break ${currentCycle} of ${TOTAL_CYCLES}.`);
    if (operatingMode === 'music') {
      pauseMusic();
    } else {
      muteSystem();
    }
  }, WORK_INTERVAL_MS);
}

// --- Main Program Logic ---

async function main() {
  console.log('--- Audio Focus Timer Initialized ---');

  const youtubeUrl = (argv._[0] && !String(argv._[0]).startsWith('--')) ? argv._[0] : null;
  const playlistName = argv.playlist;

  if (youtubeUrl) {
    operatingMode = 'youtube';
    playYouTubeVideo(youtubeUrl);
    originalVolume = await getVolume();
    logStatus(`Original volume detected: ${originalVolume}.`);
  } else if (playlistName) {
    operatingMode = 'music';
    const exists = await playlistExists(playlistName);
    if (exists) {
        playPlaylist(playlistName);
    } else if (argv.search) {
        // If local playlist not found AND --search flag is used
        searchAndPlayMusic(playlistName);
    } else {
        // If not found and no --search flag, exit gracefully
        console.error(`\n‚ùå Error: Playlist "${playlistName}" not found in your local library.`);
        console.error(`To search the Apple Music catalog instead, add the --search flag.\n`);
        process.exit(1);
    }
  } else {
    operatingMode = 'system';
    logStatus('Running in System Mute mode.');
    originalVolume = await getVolume();
    logStatus(`Original volume detected: ${originalVolume}.`);
  }

  // --- Start the timer cycles ---
  for (let i = 0; i < TOTAL_CYCLES; i++) {
      setTimeout(() => runCycle(i + 1), i * CYCLE_DURATION_MS);
  }

  if (argv.lastBreak) {
    const totalProgramDuration = TOTAL_CYCLES * CYCLE_DURATION_MS;
    setTimeout(runFinalActions, totalProgramDuration);
  }
}

main();
